#!/bin/bash

CACHE_DIR=~/.cache/manga-check
[ -d $CACHE_DIR ] || mkdir -p $CACHE_DIR

usage() {
  cat <<EOM
Usage:
  manga-check init
  manga-check check
  manga-check run
EOM
  exit
}

loginfo() {
  if [ $# -eq 0 ]; then
    header="[$(date)] "
    cat | sed "s/^/$header/" >&2
  else
    echo "[$(date)] $@" >&2
  fi
}

items() {
  cat config.cumin | cuminc -T json | jq -cM .[]
}

jsonvalue() {
  QUERY="$1"
  JSONDATA="$2"
  echo "$JSONDATA" | jq -r "$QUERY"
}

hashcode() {
  md5sum | grep -o '[0-9a-f]*'
}

http_code() {
  curl -sI -o /dev/null -w '%{http_code}' "$1"
}

extract() {
  URL="$1"
  TYPE="$2"
  PATTERN="$3"
  case "$TYPE" in
    html )
      curl -sL "$URL" | web-grep "$PATTERN" | head -1
      ;;
    json )
      curl -sL "$URL" | jq "$PATTERN"
      ;;
  esac
}

init() {
  [ -d $CACHE_DIR ] && rm -r $CACHE_DIR
  mkdir -p $CACHE_DIR
  items |
    while read json; do
      name="$(jsonvalue .name "$json")"
      url="$(jsonvalue .url "$json")"
      ty="$(jsonvalue .type "$json")"
      pat="$(jsonvalue .pattern "$json")"
      format="$(jsonvalue .format "$json")"
      F="$CACHE_DIR/$(echo $name | hashcode)"
      extract "$url" "$ty" "$pat" > $F
      loginfo <<EOM
---
Name: $name
Url: $url
Extract Type: $ty
Pattern: $pat
Matched:
---
$(cat $F)
---
Cache saved as $F

EOM
    done
}

check() {
  items |
    while read json; do
      name="$(jsonvalue .name "$json")"
      url="$(jsonvalue .url "$json")"
      ty="$(jsonvalue .type "$json")"
      pat="$(jsonvalue .pattern "$json")"
      format="$(jsonvalue .format "$json")"

      loginfo "---"
      loginfo "Checking $name $url"

      http_status="$(http_code "$url")"
      loginfo "http_status = $http_status"

      case "$http_status" in
        2* )
          F="$CACHE_DIR/$(echo $name | hashcode)"
          loginfo "Cache file is $F"
          F_NEW="$CACHE_DIR/$(echo $name | hashcode)-new"
          extract "$url" "$ty" "$pat" > $F_NEW
          if diff $F $F_NEW > /dev/null; then
            loginfo "No Update"
          else
            loginfo "Updated!!"
            diff $F $F_NEW
          fi
          mv $F_NEW $F
          ;;

        * )
          loginfo "Failed $url (http_status=$http_status)"
          ;;
      esac

    done
}

run() {
    while :; do
        check
        sleep 30m
    done
}

[ $# -eq 0 ] && usage
case "$1" in
  init )
    init
    ;;
  check )
    check
    ;;
  run )
    run
    ;;
  help | --help | -h )
    usage
    ;;
esac
